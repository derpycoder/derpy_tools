# Meilisearch

## Section

```elixir
keys =
  Req.new(
    base_url: "http://localhost:7700",
    auth: {:bearer, System.fetch_env!("LB_MEILISEARCH_MASTER_KEY")}
  )
  |> Req.get!(url: "/keys")
```

```elixir
use Pathex

search_key = Pathex.get(keys, path(:body / "results" / 0 / "key"))
```

```elixir
Req.new(
  base_url: "http://localhost:7700",
  auth: {:bearer, System.fetch_env!("LB_MEILISEARCH_MASTER_KEY")}
)
|> Req.get!(url: "/indexes")
```

```elixir
Req.new(
  base_url: "http://localhost:7700",
  auth: {:bearer, search_key}
)
|> Req.post!(
  url: "/indexes/blog-posts/search",
  json: %{
    attributesToHighlight: ["*"],
    facets: [],
    highlightPreTag: "<yay>",
    highlightPostTag: "</yay>",
    limit: 21,
    offset: 0,
    q: "tuskfile"
  }
)
```

```elixir
Req.new(
  base_url: "http://localhost:7700",
  auth: {:bearer, System.fetch_env!("LB_MEILISEARCH_MASTER_KEY")}
)
|> Req.get!(url: "/indexes/blog-posts/settings")
```

```elixir
search_results =
  Req.new(
    base_url: "http://localhost:7700",
    auth: {:bearer, search_key}
  )
  |> Req.post!(
    url: "/indexes/blog-posts/search",
    json: %{
      attributesToHighlight: ["*"],
      facets: [],
      highlightPreTag: "<yay>",
      highlightPostTag: "</yay>",
      limit: 21,
      offset: 0,
      showRankingScore: true,
      q: "com"
    }
  )
```

```elixir
hits = search_results.body["hits"]
```

## Settings

> Settings must happen before indexing or inserting data, as it causes re indexing.

#### Synonyms:

CLI = Command Line Tools
WWW = World Wide Web
...

#### Stop Words:

of, the, to, and, :

#### Distinct Attributes:

id, email_id, slug ...

#### Displayed Attributes:

title, slug ...

```elixir
Req.new(
  base_url: "http://localhost:7700",
  auth: {:bearer, System.fetch_env!("LB_MEILISEARCH_MASTER_KEY")}
)
|> Req.get!(url: "/indexes/blog-posts/synonyms")
```

```elixir
search_results =
  Req.new(
    base_url: "http://localhost:7700",
    auth: {:bearer, search_key}
  )
  |> Req.post!(
    url: "/multi-search",
    json: %{
      queries: [
        %{
          indexUid: "blog-posts",
          q: "Best",
          attributesToHighlight: ["*"],
          highlightPreTag: "<yay>",
          highlightPostTag: "</yay>",
          limit: 21,
          offset: 0,
          showRankingScore: true
        },
        %{
          indexUid: "movies",
          q: "nemo",
          limit: 5
        }
      ]
    }
  )
```

## Filters

```elixir
search_results =
  Req.new(
    base_url: "http://localhost:7700",
    auth: {:bearer, search_key}
  )
  |> Req.post!(
    url: "/indexes/blog-posts/search",
    json: %{
      attributesToHighlight: ["*"],
      facets: [],
      highlightPreTag: "<yay>",
      highlightPostTag: "</yay>",
      limit: 21,
      offset: 0,
      showRankingScore: true,
      sort: ["star_rating:desc"],
      q: "com",
      filter: "tags.label = \"Command Line Tools\" AND release_date > 1674777600"
    }
  )
```

## Facets

```elixir
search_results =
  Req.new(
    base_url: "http://localhost:7700",
    auth: {:bearer, search_key}
  )
  |> Req.post!(
    url: "/indexes/blog-posts/search",
    json: %{
      attributesToHighlight: ["*"],
      highlightPreTag: "<yay>",
      highlightPostTag: "</yay>",
      limit: 21,
      offset: 0,
      showRankingScore: true,
      sort: ["star_rating:desc"],
      q: "com",
      facets: [
        "tags.label",
        "star_rating"
      ],
      filter: "tags.label = \"Command Line Tools\" AND release_date > 1674777600"
    }
  )
```

<!-- livebook:{"offset":3535,"stamp":{"token":"QTEyOEdDTQ.e7_ThfmBAf3MgSlhop8NNVlHii4hSU2UCTYhne2beaYqbkKjLS1hGE_XR3I.WWwH_CDEgloeGjEK.Fd1n3sb5f-QGAP3R8huho_LI22GA9yOAe15VIn93WNgB74TavOMGgL8QvQHpSdCZSqvLuHt-v98e.l9delDQ8G4MCflX4Ygx_XA","version":1}} -->
